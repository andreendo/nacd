
> execa@4.0.0 test /home/user/benchmarks/nacd/sindresorhus_execa
> xo && nyc ava && tsd


  test/kill.js:141:69
  ⚠  141:69  Async arrow function has too many parameters (5). Maximum allowed is 4.  max-params
  ⚠  178:2   Unexpected fixme comment.                                                no-warning-comments

  lib/stream.js:9:2
  ⚠    9:2   Unexpected todo comment.                                                 no-warning-comments

  3 warnings

  ✔ stdio › execa() undefined
  ✔ stdio › execa() null
  ✔ stdio › execa() { stdio: 'inherit' }
  ✔ stdio › execa() { stdio: 'pipe' }
  ✔ stdio › execa() { stdio: 'ignore' }
  ✔ stdio › execa() { stdio: [ 0, 1, 2 ] }
  ✔ stdio › execa() {}
  ✔ stdio › execa() { stdio: [] }
  ✔ stdio › execa() { stdin: 'pipe' }
  ✔ stdio › execa() { stdout: 'ignore' }
  ✔ stdio › execa() { stderr: 'inherit' }
  ✔ stdio › execa() { stdin: 'pipe', stdout: 'ignore', stderr: 'inherit' }
  ✔ stdio › execa() { stdin: 'pipe', stdout: 'ignore' }
  ✔ stdio › execa() { stdin: 'pipe', stderr: 'inherit' }
  ✔ stdio › execa() { stdout: 'ignore', stderr: 'inherit' }
  ✔ stdio › execa() { stdin: 0, stdout: 1, stderr: 2 }
  ✔ stdio › execa() { stdin: 0, stdout: 1 }
  ✔ stdio › execa() { stdin: 0, stderr: 2 }
  ✔ stdio › execa() { stdout: 1, stderr: 2 }
  ✔ stdio › execa() { stdio: { foo: 'bar' } }
  ✔ stdio › execa() { stdin: 'inherit', stdio: 'pipe' }
  ✔ stdio › execa() { stdin: 'inherit', stdio: [ 'pipe' ] }
  ✔ stdio › execa() { stdin: 'inherit', stdio: [ undefined, 'pipe' ] }
  ✔ stdio › execa() { stdin: 0, stdio: 'pipe' }
  ✔ stdio › execa.fork() undefined
  ✔ stdio › execa.fork() { stdio: 'ignore' }
  ✔ stdio › execa.fork() { stdio: 'ipc' }
  ✔ stdio › execa.fork() { stdio: [ 0, 1, 2 ] }
  ✔ stdio › execa.fork() { stdio: [ 0, 1, 2, 3 ] }
  ✔ stdio › execa.fork() { stdio: [ 0, 1, 2, 'ipc' ] }
  ✔ stdio › execa.fork() { stdio: [ 0, 1, undefined ] }
  ✔ stdio › execa.fork() { stdio: [ 0, 1, 2, undefined ] }
  ✔ stdio › execa.fork() { stdout: 'ignore' }
  ✔ stdio › execa.fork() { stdout: 'ignore', stderr: 'ignore' }
  ✔ stdio › execa.fork() { stdio: { foo: 'bar' } }
  ✔ stdio › execa.fork() { stdin: 'inherit', stdio: 'pipe' }
  ✔ node › node correctly use nodePath (365ms)
  ✔ node › node pass on nodeOptions (336ms)
  ✔ node › node() (493ms)
  ✔ promise › promise methods are not enumerable
  ✔ node › node pipe stdout (749ms)
  ✔ promise › finally function is executed on success (872ms)
  ✔ promise › finally function is executed on failure (876ms)
  ✔ node › node's forked script has a communication channel (943ms)
  ✔ promise › throw in finally function bubbles up on success (1s)
  ✔ promise › throw in finally bubbles up on error (943ms)
  ✔ stream › result.all shows both `stdout` and `stderr` intermixed (1.7s)
  ✔ stream › buffer: false > promise does not resolve when output is big and is not read (1s)
  ✔ error › stdout/stderr/all on process errors, in sync mode
  ✔ error › result.killed is false if not killed, in sync mode (703ms)
  ✔ error › result.killed is false on process error, in sync mode
  ✔ error › error.code is defined on failure if applicable (943ms)
  ✔ error › result.killed is false on process error (1.3s)
  ✔ error › Original error.message is kept (2.3s)
  ✔ error › stdout/stderr/all on process errors (2.9s)
  ✔ error › stdout/stderr/all available on errors (3s)
  ✔ error › exitCode is 0 on success (2.8s)
  ✔ error › exitCode is 2 (2.7s)
  ✔ error › exitCode is 3 (2.6s)
  ✔ error › exitCode is 4 (2.6s)
  ✔ error › error.message contains the command (2.5s)
  ✔ error › error.message contains stdout/stderr if available (2.5s)
  ✔ error › error.message does not contain stdout/stderr if not available (2.4s)
  ✔ error › error.shortMessage does not contain stdout/stderr (2.4s)
  ✔ error › failed is false on success (2.3s)
  ✔ error › failed is true on failure (2.3s)
  ✔ error › error.killed is true if process was killed directly (2.2s)
  ✔ error › error.killed is false if process was killed indirectly (2.2s)
  ✔ error › result.killed is false if not killed (2.1s)
  ✔ error › error.signal is SIGINT (1.3s)
  ✔ error › error.signalDescription is defined (1.3s)
  ✔ error › error.signal is SIGTERM (1.2s)
  ✔ error › exitCode is undefined on signal termination (1.1s)
  ✔ error › result.signal is undefined for successful execution (1.1s)
  ✔ error › result.signalDescription is undefined for successful execution (1.1s)
  ✔ error › error.code is undefined on success (1s)
  ✔ error › custom error.signal (1.2s)
  ✔ error › result.signal is undefined if process failed, but was not killed (1.1s)
  ✔ command › execa.command.sync() (2.5s)
  ✔ stream › buffer: false > promise does not resolve when output is big and "all" is used but not read (1s)
  ✔ command › allow commands with spaces and no array arguments (3.9s)
  ✔ command › allow commands with spaces and array arguments (3.8s)
  ✔ command › execa.command() (3.8s)
  ✔ command › execa.command() ignores consecutive spaces (3.7s)
  ✔ command › execa.command() allows escaping spaces in commands (3.7s)
  ✔ command › execa.command() allows escaping spaces in arguments (3.5s)
  ✔ command › execa.command() escapes other whitespaces (3.5s)
  ✔ command › execa.command() trims (3.4s)
  ✔ command › command is: " foo bar" (4.2s)
  ✔ command › command is: " baz quz" (4.3s)
  ✔ command › command is: "" (4.3s)
  ✔ kill › `forceKillAfterTimeout` should not be a float
  ✔ kill › `forceKillAfterTimeout` should not be negative
  ✔ kill › execa() returns a promise with kill()
  ✔ kill › timedOut is false if timeout is undefined and exit code is 0 in sync mode (804ms)
  ✔ kill › cancel method kills the subprocess
  ✔ kill › result.isCanceled is false when spawned.cancel() isn't called in sync mode (success) (852ms)
  ✔ kill › result.isCanceled is false when spawned.cancel() isn't called in sync mode (failure) (779ms)
  ✔ kill › timeout kills the process if it times out, in sync mode (4s)
  ✔ kill › timeout must not be negative (3.9s)
  ✔ kill › timeout must be an integer (3.9s)
  ✔ kill › `forceKillAfterTimeout: false` should not kill after a timeout (4.4s)
  ✔ kill › timeout does not kill the process if it does not time out (4s)
  ✔ kill › timedOut is false if timeout is undefined (3.9s)
  ✔ kill › timedOut is false if timeout is 0 (3.8s)
  ✔ kill › spawnAndExit (2.9s)
  ✔ kill › spawnAndExit cleanup (2.9s)
  ✔ kill › spawnAndExit detached (2.8s)
  ✔ kill › spawnAndExit cleanup detached (2.8s)
  ✔ kill › spawnAndKill SIGKILL (2.7s)
  ✔ kill › spawnAndKill cleanup SIGKILL (2.7s)
  ✔ kill › spawnAndKill detached SIGKILL (2.6s)
  ✔ kill › removes exit handler on exit (2.5s)
  ✔ kill › result.isCanceled is false when spawned.cancel() isn't called (success) (2.4s)
  ✔ kill › result.isCanceled is false when spawned.cancel() isn't called (failure) (2.3s)
  ✔ kill › calling cancel method throws an error with message "Command was canceled" (665ms)
  ✔ kill › error.isCanceled is true when cancel method is used (610ms)
  ✔ kill › error.isCanceled is false when kill method is used (573ms)
  ✔ kill › calling cancel method twice should show the same behaviour as calling it once (557ms)
  ✔ kill › calling cancel method on a process which has been killed does not make error.isCanceled true (484ms)
  ✖ kill › spawnAndKill SIGTERM 
  ✖ kill › spawnAndKill cleanup SIGTERM 
  ✖ kill › spawnAndKill detached SIGTERM 
  ✖ kill › spawnAndKill cleanup detached SIGTERM 
  ✔ kill › spawnAndKill cleanup detached SIGKILL (2.5s)
  ✔ kill › timeout kills the process if it times out (4.1s)
  ✔ kill › calling cancel method on a successfully completed process does not make result.isCanceled true (542ms)
  ✔ kill › kill("SIGKILL") should terminate cleanly (4.5s)
  ✖ kill › `forceKillAfterTimeout: number` should kill after a timeout 
  ✖ kill › `forceKillAfterTimeout: true` should kill after a timeout 
  ✖ kill › kill() with no arguments should kill after a timeout 
  ✔ test › execa.sync() (831ms)
  ✔ test › execa.sync() throws error if written to stderr
  ✔ test › skip throwing when using reject option in sync mode (448ms)
  ✔ test › stripFinalNewline in sync mode (578ms)
  ✔ test › stripFinalNewline in sync mode on failure (236ms)
  ✔ test › execa() returns a promise with pid
  ✔ test › child_process.spawn() propagated errors have correct shape
  ✔ test › child_process.spawnSync() errors are propagated with a correct shape
  ✔ test › child_process.spawn() errors are propagated (702ms)
  ✔ test › execa() rejects if running non-executable (639ms)
  ✔ test › execa() rejects with correct error and doesn't throw if running non-executable with input (628ms)
  ✔ test › preferLocal: undefined (976ms)
  ✔ test › preferLocal: false (1s)
  ✔ test › child process errors rejects promise right away (828ms)
  ✔ test › child process errors are handled (850ms)
  ✔ test › stdin errors are handled (885ms)
  ✔ stream › stdout/stderr/all are undefined if ignored in sync mode (477ms)
  ✔ stream › input option can be a String - sync (226ms)
  ✔ stream › input option can be a Buffer - sync (192ms)
  ✔ stream › helpful error trying to provide an input stream in sync mode
  ✔ test › execa() (3.6s)
  ✔ test › skip throwing when using reject option (2.6s)
  ✔ test › stripFinalNewline: true (2.1s)
  ✔ test › stripFinalNewline: false (2s)
  ✔ test › stripFinalNewline on failure (2s)
  ✔ test › preferLocal: true (1.1s)
  ✔ test › localDir option (1.1s)
  ✔ test › do not try to consume streams twice (785ms)
  ✔ test › use relative path with '..' chars (758ms)
  ✔ test › use environment variables by default (714ms)
  ✔ stream › do not buffer when streaming (544ms)
  ✔ test › extend environment variables by default (708ms)
  ✔ test › do not extend environment with `extendEnv: false` (698ms)
  ✔ test › can use `options.shell: true` (686ms)
  ✔ test › can use `options.shell: string` (655ms)
  ✔ test › use extend environment with `extendEnv: true` and `shell: true` (633ms)
  ✔ test › detach child process (606ms)
  ✔ stream › buffer (1.9s)
  ✔ stream › pass `stdout` to a file descriptor (1.8s)
  ✔ stream › pass `stderr` to a file descriptor (1.8s)
  ✔ stream › result.all is undefined unless opts.all is true (1.8s)
  ✔ stream › stdout/stderr/all are undefined if ignored (1.7s)
  ✔ stream › input option can be a String (1.2s)
  ✔ stream › input option can be a Buffer (1.1s)
  ✔ stream › you can write to child.stdin (1.1s)
  ✔ stream › opts.stdout:ignore - stdout will not collect data (686ms)
  ✔ test › write to fast-exit process (752ms)
  ✔ stream › do not buffer stdout when `buffer` set to `false` (680ms)
  ✔ stream › do not buffer stderr when `buffer` set to `false` (625ms)
  ✔ stream › buffer: false > promise resolves (516ms)
  ✔ stream › buffer: false > promise resolves when output is big but is not pipable (488ms)
  ✔ stream › buffer: false > promise rejects when process returns non-zero (401ms)
  ✔ stream › can use all: true with stdout: ignore (365ms)
  ✔ stream › can use all: true with stderr: ignore (305ms)
  ✔ stream › input can be a Stream (1.2s)
  ✔ stream › buffer: false > promise resolves when output is big and is read (529ms)
  ✔ stream › buffer: false > promise resolves when output is big and "all" is used and is read (511ms)
  ✔ stream › maxBuffer affects stdout (845ms)
  ✔ stream › maxBuffer affects stderr (867ms)
  ✔ test › execPath option (3.8s)

  7 tests failed

  kill › spawnAndKill SIGTERM

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:150

   149:                                   
   150:   await t.throwsAsync(subprocess);
   151:                                   

  Promise resolved with:

  {
    all: undefined,
    command: 'sub-process false false',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: undefined,
    stdout: undefined,
    timedOut: false,
  }



  kill › spawnAndKill cleanup SIGTERM

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:150

   149:                                   
   150:   await t.throwsAsync(subprocess);
   151:                                   

  Promise resolved with:

  {
    all: undefined,
    command: 'sub-process true false',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: undefined,
    stdout: undefined,
    timedOut: false,
  }



  kill › spawnAndKill detached SIGTERM

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:150

   149:                                   
   150:   await t.throwsAsync(subprocess);
   151:                                   

  Promise resolved with:

  {
    all: undefined,
    command: 'sub-process false true',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: undefined,
    stdout: undefined,
    timedOut: false,
  }



  kill › spawnAndKill cleanup detached SIGTERM

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:150

   149:                                   
   150:   await t.throwsAsync(subprocess);
   151:                                   

  Promise resolved with:

  {
    all: undefined,
    command: 'sub-process true true',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: undefined,
    stdout: undefined,
    timedOut: false,
  }



  kill › `forceKillAfterTimeout: number` should kill after a timeout

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:40

   39:                                                      
   40:     const {signal} = await t.throwsAsync(subprocess);
   41:     t.is(signal, 'SIGKILL');                         

  Promise resolved with:

  {
    all: undefined,
    command: 'node ./test/fixtures/no-killable',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: '',
    stdout: '',
    timedOut: false,
  }



  kill › `forceKillAfterTimeout: true` should kill after a timeout

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:50

   49:                                                      
   50:     const {signal} = await t.throwsAsync(subprocess);
   51:     t.is(signal, 'SIGKILL');                         

  Promise resolved with:

  {
    all: undefined,
    command: 'node ./test/fixtures/no-killable',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: '',
    stdout: '',
    timedOut: false,
  }



  kill › kill() with no arguments should kill after a timeout

  /home/user/benchmarks/nacd/sindresorhus_execa/test/kill.js:60

   59:                                                      
   60:     const {signal} = await t.throwsAsync(subprocess);
   61:     t.is(signal, 'SIGKILL');                         

  Promise resolved with:

  {
    all: undefined,
    command: 'node ./test/fixtures/no-killable',
    exitCode: 0,
    failed: false,
    isCanceled: false,
    killed: false,
    stderr: '',
    stdout: '',
    timedOut: false,
  }

----------|----------|----------|----------|----------|-------------------|
File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
----------|----------|----------|----------|----------|-------------------|
All files |        0 |        0 |        0 |        0 |                   |
----------|----------|----------|----------|----------|-------------------|
npm ERR! Test failed.  See above for more details.
